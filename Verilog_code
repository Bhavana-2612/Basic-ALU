module alu (
    input  [3:0] A, B,         // 4-bit input operands
    input  [2:0] opcode,       // operation selector
    output reg [3:0] result,   // 4-bit result output
    output reg carry_out       // Carry/Borrow flag
);

// Temporary register for arithmetic (5 bits to capture carry/borrow)
reg [4:0] temp;

always @(*) begin
    // Default values (avoid latches)
    result    = 4'b0000;
    carry_out = 1'b0;
    
    case (opcode)
        3'b000: begin  
            // ADD operation
            // Store result in 5-bit temp to catch carry
            temp      = A + B;       
            result    = temp[3:0];  // Lower 4 bits are the sum
            carry_out = temp[4];    // MSB (5th bit) is the carry-out
        end

        3'b001: begin  
            // SUB operation (A - B)
            // Again use 5 bits for possible borrow
            temp      = A - B;      
            result    = temp[3:0];  // Lower 4 bits are the difference
            carry_out = temp[4];    // Acts as borrow flag in subtraction
        end

        3'b010: begin  
            // AND operation
            result    = A & B;      
            carry_out = 1'b0;       // No carry in logical operation
        end

        3'b011: begin  
            // OR operation
            result    = A | B;      
            carry_out = 1'b0;       // No carry in logical operation
        end

        3'b100: begin  
            // NOT operation (only applied to A)
            result    = ~A;         
            carry_out = 1'b0;       // No carry in logical operation
        end

        default: begin  
            // Default case: result = 0, carry_out = 0
            result    = 4'b0000;
            carry_out = 1'b0;
        end
    endcase
end

endmodule
